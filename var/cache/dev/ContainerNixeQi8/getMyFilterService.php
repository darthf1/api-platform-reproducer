<?php

namespace ContainerNixeQi8;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMyFilterService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\ApiPlatform\DataProvider\Filter\MyFilter' shared autowired service.
     *
     * @return \App\ApiPlatform\DataProvider\Filter\MyFilter
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/core/src/Api/FilterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/core/src/Core/Bridge/Elasticsearch/DataProvider/Filter/FilterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/core/src/Elasticsearch/Util/FieldDatatypeTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/core/src/Core/Bridge/Elasticsearch/DataProvider/Filter/AbstractFilter.php';
        include_once \dirname(__DIR__, 4).'/src/ApiPlatform/DataProvider/Filter/SearchFilterInterface.php';
        include_once \dirname(__DIR__, 4).'/src/ApiPlatform/DataProvider/Filter/AbstractSearchFilter.php';
        include_once \dirname(__DIR__, 4).'/src/ApiPlatform/DataProvider/Filter/MyFilter.php';

        return $container->privates['App\\ApiPlatform\\DataProvider\\Filter\\MyFilter'] = new \App\ApiPlatform\DataProvider\Filter\MyFilter(($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? $container->getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService()), ($container->privates['api_platform.metadata.property.metadata_factory.cached.legacy'] ?? $container->getApiPlatform_Metadata_Property_MetadataFactory_Cached_LegacyService()), ($container->privates['api_platform.resource_class_resolver'] ?? $container->getApiPlatform_ResourceClassResolverService()), ($container->privates['api_platform.elasticsearch.identifier_extractor'] ?? $container->load('getApiPlatform_Elasticsearch_IdentifierExtractorService')), ($container->privates['api_platform.iri_converter.legacy'] ?? $container->getApiPlatform_IriConverter_LegacyService()), ($container->privates['property_accessor'] ?? $container->getPropertyAccessorService()));
    }
}
